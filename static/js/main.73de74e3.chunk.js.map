{"version":3,"sources":["components/Button.jsx","components/Carousel.jsx","components/Card.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","nextState","_this$props","this","props","color","onClick","size","text","buttonClasses","react_default","a","createElement","className","Component","defaultProps","Carousel","index","renderTitleContent","renderCardOne","renderCardTwo","renderCardThree","renderCardFour","renderContent","cardNumber","Card","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cardCount","setState","onNext","handleNext","bind","onPrevious","handlePrevious","href","type","alt","src","height","components_Carousel","components_Button","id","ReactGA","initialize","pageview","window","location","pathname","search","App","components_Card","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73de74e3.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/button.css'\n\nclass Button extends Component {\n\n  static propTypes = {\n    color: PropTypes.string,\n    size: PropTypes.string,\n    text: PropTypes.string,\n    onClick: PropTypes.func\n  };\n\n  static defaultProps = {\n    color: \"teal\",\n    size: \"medium\",\n    text: \"\",\n    onClick: () => null\n  }\n\n  shouldComponentUpdate(nextState) {\n    return false;\n  }\n\n  render() {\n    const { color, onClick, size, text } = this.props;\n    const colorClass = \"button--\" + color;\n    const sizeClass = \"button--\" + size;\n    const buttonClasses = colorClass + \" \" + sizeClass;\n\n    return (\n      <div className={buttonClasses} onClick={onClick}>\n        <span>\n          { text }\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Button;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/carousel.css'\n\nclass Carousel extends Component {\n\n  static propTypes = {\n    cardNumber: PropTypes.number\n  };\n\n  static defaultProps = {\n    cardNumber: -1\n  }\n\n  renderTitleContent() {\n    return (\n      <div>\n        test title content\n      </div>\n    )\n  }\n\n  renderCardOne() {\n    return (\n      <div>\n        card one\n      </div>\n    )\n  }\n\n  renderCardTwo() {\n    return (\n      <div>\n        card two\n      </div>\n    )\n  }\n\n  renderCardThree() {\n    return (\n      <div>\n        card three\n      </div>\n    )\n  }\n\n  renderCardFour() {\n    return (\n      <div>\n        card four LAST CARD\n      </div>\n    )\n  }\n\n  renderContent(index) {\n    switch(index) {\n      case 0:\n        return this.renderTitleContent();\n      case 1:\n        return this.renderCardOne();\n      case 2:\n        return this.renderCardTwo();\n      case 3:\n        return this.renderCardThree();\n      case 4:\n        return this.renderCardFour();\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    return (\n      <div className='carousel' >\n        { this.renderContent(this.props.cardNumber) }\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React, {Component} from 'react';\nimport Button from \"./Button.jsx\";\nimport Carousel from \"./Carousel.jsx\";\nimport '../css/card.css'\nimport '../css/typography.css'\nimport '../css/icons.css'\n\nclass Card extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      cardCount: 0\n    };\n  }\n\n  shouldComponentUpdate(nextState) {\n    return this.state.cardCount !== nextState.cardCount;\n  }\n\n  handlePrevious() {\n    this.setState({\n      cardCount: this.state.cardCount - 1\n    });\n  }\n\n  handleNext() {\n    this.setState({\n      cardCount: this.state.cardCount + 1\n    });\n  }\n\n  render() {\n    const onNext = this.handleNext.bind(this);\n    const onPrevious = this.handlePrevious.bind(this);\n\n    return (\n      <div className=\"card app-container\">\n\n        <div className='card__panel'>\n          <a href=\"localhost:3000\">\n            <div className=\"card__panel__logo\"></div>\n          </a>\n          <div className=\"card__panel__banner\">\n            <span>\n              Chihayafuru: Lesson 1\n            </span>\n          </div>\n          <div className=\"card__panel__control-panel\">\n            <a href=\"localhost:3000\"><i type=\"glyph-cross-soft\"></i></a>\n            <div className=\"icon icon--cancel\"></div>\n          </div>\n        </div>\n\n        <div className='card__screens'>\n\n          <p>flashpopZ Content TBD</p>\n          <img alt=\"flashpopz-large\" src=\"flashpopz-large.png\" height='200px'/>\n          <Carousel cardNumber={this.state.cardCount}/>\n        </div>\n\n        <div className='card__navigation'>\n          <div className='card__navigation--left'>\n            <Button id=\"previous\" text=\"previous\" onClick={ onPrevious }></Button>\n          </div>\n          <div className='card__navigation--right'>\n            <Button id=\"next\" text=\"next\" onClick={ onNext }></Button>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './components/Card.jsx'\nimport ReactGA from 'react-ga';\nReactGA.initialize('UA-128940867-2');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Card/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}